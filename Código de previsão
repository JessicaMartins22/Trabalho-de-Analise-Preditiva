# ‚úÖ Instalar pacotes necess√°rios
!pip install pandas numpy matplotlib statsmodels openpyxl --quiet

# ‚úÖ Importa√ß√£o de bibliotecas
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.seasonal import seasonal_decompose
import warnings
import locale
from google.colab import files

# ‚úÖ Configura√ß√£o de ambiente
warnings.filterwarnings('ignore')

try:
    locale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')
except locale.Error:
    locale.setlocale(locale.LC_TIME, '')
    print("‚ö† Aviso: 'pt_BR.UTF-8' n√£o dispon√≠vel no Colab. Usando localidade padr√£o.")

# ‚úÖ Upload do arquivo Excel
uploaded = files.upload()
arquivo = list(uploaded.keys())[0]

# ‚úÖ Leitura e pr√©-processamento dos dados
df = pd.read_excel(arquivo)
print("üìå Colunas encontradas no Excel:", df.columns.tolist())
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')

if 'timestamp' not in df.columns:
    raise KeyError("‚ùå A coluna 'timestamp' n√£o foi encontrada no Excel.")
df.rename(columns={'timestamp': 'data'}, inplace=True)

col_vendas = [col for col in df.columns if any(keyword in col for keyword in ['venda', 'vendas'])]
if not col_vendas:
    print("Colunas dispon√≠veis:", df.columns.tolist())
    coluna_sugerida = df.columns[1]
    print(f"Sugest√£o: Renomear a coluna '{coluna_sugerida}' para 'vendas'")
    df.rename(columns={coluna_sugerida: 'vendas'}, inplace=True)
else:
    df.rename(columns={col_vendas[0]: 'vendas'}, inplace=True)

df['data'] = pd.to_datetime(df['data'])
df = df.sort_values('data').set_index('data')

df['ano'] = df.index.year
df['mes'] = df.index.month
df['semana'] = df.index.isocalendar().week

# ‚úÖ Decomposi√ß√£o da s√©rie temporal
%matplotlib inline
decomp = seasonal_decompose(df['vendas'], model='additive', period=30)
decomp.plot()
plt.suptitle('üîç Decomposi√ß√£o da S√©rie Temporal', fontsize=14)
plt.tight_layout()
plt.show()

# ‚úÖ Modelo SARIMA
modelo = SARIMAX(df['vendas'], order=(1,1,1), seasonal_order=(1,1,1,30))
resultado = modelo.fit()

# ‚úÖ Previs√£o para Dezembro/2024
inicio_prev = '2024-12-01'
fim_prev = '2024-12-31'
previsao = resultado.get_prediction(start=inicio_prev, end=fim_prev)
prev_df = previsao.summary_frame()[['mean']].rename(columns={'mean': 'vendas_previstas'})
prev_df['vendas_previstas'] = prev_df['vendas_previstas'].round(0)

prev_df['semana'] = prev_df.index.isocalendar().week
prev_df['dia'] = prev_df.index.day
prev_df['dia_da_semana'] = prev_df.index.strftime('%A')
prev_df['ano'] = prev_df.index.year

# ‚úÖ M√©dias semanais hist√≥ricas
df_treino = df[df.index < '2024-12-01']
media_semanal_hist = (
    df_treino.groupby('semana')['vendas']
    .mean()
    .reset_index()
    .rename(columns={'vendas': 'media_historica_vendas'})
)

# ‚úÖ Junta previs√£o com hist√≥rico semanal
prev_df = prev_df.merge(media_semanal_hist, on='semana', how='left')

# ‚úÖ Exibe tabela final
print("\nüìÖ Previs√£o di√°ria para Dezembro de 2024:")
print(prev_df[['dia', 'dia_da_semana', 'vendas_previstas', 'media_historica_vendas']])

# ‚úÖ C√°lculo das m√©tricas de erro
prev_df['erro'] = prev_df['vendas_previstas'] - prev_df['media_historica_vendas']
prev_df['erro_absoluto'] = prev_df['erro'].abs()
prev_df['erro_quadrado'] = prev_df['erro'] ** 2

dm = prev_df['erro'].mean()
mad = prev_df['erro_absoluto'].mean()
mse = prev_df['erro_quadrado'].mean()
rmse = np.sqrt(mse)
made = mad

metricas_df = pd.DataFrame({
    'M√©trica': ['DM', 'MAD', 'MSE', 'RMSE', 'MADE'],
    'Valor': [dm, mad, mse, rmse, made]
})

print("\nüìê M√©tricas de Avalia√ß√£o da Previs√£o:")
print(metricas_df.to_string(index=False))

# ‚úÖ Gr√°fico comparativo por semana
agrupado = prev_df.groupby('semana')[['vendas_previstas', 'media_historica_vendas']].mean()
agrupado.plot(kind='bar', figsize=(10,5))
plt.title('üìä Comparativo Semanal: Dez/2024 vs M√©dia Hist√≥rica')
plt.xlabel('Semana do Ano')
plt.ylabel('Vendas M√©dias')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# ‚úÖ NOVO: Distribui√ß√£o mensal de vendas (hist√≥rico)
vendas_mensal = df.groupby(['ano', 'mes'])['vendas'].sum().reset_index()
vendas_mensal['ano_mes'] = vendas_mensal['ano'].astype(str) + '-' + vendas_mensal['mes'].astype(str).str.zfill(2)
vendas_mensal.plot(x='ano_mes', y='vendas', kind='bar', figsize=(12,5), legend=False)
plt.title('üìÖ Distribui√ß√£o Mensal de Vendas')
plt.xlabel('Ano-M√™s')
plt.ylabel('Vendas Totais')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# ‚úÖ NOVO: Distribui√ß√£o semanal de vendas (hist√≥rico)
vendas_semanal = df.groupby(['ano', 'semana'])['vendas'].sum().reset_index()
vendas_semanal['ano_semana'] = vendas_semanal['ano'].astype(str) + '-S' + vendas_semanal['semana'].astype(str).str.zfill(2)
vendas_semanal.plot(x='ano_semana', y='vendas', kind='bar', figsize=(14,5), legend=False)
plt.title('üìÖ Distribui√ß√£o Semanal de Vendas')
plt.xlabel('Ano-Semana')
plt.ylabel('Vendas Totais')
plt.xticks(rotation=90)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# ‚úÖ NOVO: Semana dentro do m√™s
def semana_do_mes(dia):
    if dia <= 7:
        return 'Semana 1'
    elif dia <= 14:
        return 'Semana 2'
    elif dia <= 21:
        return 'Semana 3'
    else:
        return 'Semana 4'

df['semana_mes'] = df.index.day.map(semana_do_mes)

# ‚úÖ Agrupamento por ano, m√™s e semana do m√™s
vendas_semana_mes = (
    df.groupby(['ano', 'mes', 'semana_mes'])['vendas']
    .sum()
    .reset_index()
    .sort_values(['ano', 'mes', 'semana_mes'])
)

# ‚úÖ Criar coluna ano-m√™s para o eixo
vendas_semana_mes['ano_mes'] = vendas_semana_mes['ano'].astype(str) + '-' + vendas_semana_mes['mes'].astype(str).str.zfill(2)

# ‚úÖ Pivotar para ter cada semana como uma barra separada
pivot = vendas_semana_mes.pivot_table(index='ano_mes', columns='semana_mes', values='vendas', fill_value=0)

# ‚úÖ Plotar gr√°fico
pivot.plot(kind='bar', figsize=(14,6))
plt.title('üìÖ Distribui√ß√£o Semanal Dentro do M√™s')
plt.xlabel('Ano-M√™s')
plt.ylabel('Vendas Totais')
plt.xticks(rotation=45)
plt.legend(title='Semana do M√™s')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# ‚úÖ Boxplot: Distribui√ß√£o mensal de vendas
plt.figure(figsize=(12,6))
df['ano_mes'] = df['ano'].astype(str) + '-' + df['mes'].astype(str).str.zfill(2)
df.boxplot(column='vendas', by='ano_mes', grid=False)
plt.title('üì¶ Boxplot de Vendas Mensais')
plt.suptitle('')
plt.xlabel('Ano-M√™s')
plt.ylabel('Vendas')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ‚úÖ Nomear os meses
meses_nome = {
    1: 'Janeiro', 2: 'Fevereiro', 3: 'Mar√ßo', 4: 'Abril',
    5: 'Maio', 6: 'Junho', 7: 'Julho', 8: 'Agosto',
    9: 'Setembro', 10: 'Outubro', 11: 'Novembro', 12: 'Dezembro'
}
df['mes_nome'] = df['mes'].map(meses_nome)

# ‚úÖ Boxplot: Distribui√ß√£o das vendas pelos 12 meses do ano (com nomes)
plt.figure(figsize=(12,6))
order_meses = list(meses_nome.values())
df.boxplot(column='vendas', by='mes_nome', grid=False)
plt.title('üì¶ Boxplot de Vendas por M√™s do Ano')
plt.suptitle('')
plt.xlabel('M√™s')
plt.ylabel('Vendas')
plt.xticks(ticks=np.arange(1,13), labels=order_meses, rotation=45)
plt.tight_layout()
plt.show()

# ‚úÖ Boxplot: Distribui√ß√£o semanal geral de vendas
df['ano_semana'] = df['ano'].astype(str) + '-S' + df['semana'].astype(str).str.zfill(2)
plt.figure(figsize=(14,6))
df.boxplot(column='vendas', by='ano_semana', grid=False)
plt.title('üì¶ Boxplot de Vendas Semanais')
plt.suptitle('')
plt.xlabel('Ano-Semana')
plt.ylabel('Vendas')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# ‚úÖ Boxplot: Distribui√ß√£o por semanas dentro do m√™s
plt.figure(figsize=(10,6))
df.boxplot(column='vendas', by='semana_mes', grid=False)
plt.title('üì¶ Boxplot de Vendas por Semana do M√™s')
plt.suptitle('')
plt.xlabel('Semana do M√™s')
plt.ylabel('Vendas')
plt.tight_layout()
plt.show()
